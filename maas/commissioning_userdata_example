#!/bin/bash
#
# This script carries inside it multiple files.  When executed, it creates
# the files into a temporary directory and uses them to execute commands
# which gather data about the running machine or perform actions.
#

#### script setup ######
export TEMP_D=$(mktemp -d "${TMPDIR:-/tmp}/${0##*/}.XXXXXX")
export BIN_D="${TEMP_D}/bin"
export PATH="$BIN_D:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

mkdir -p "$BIN_D"

# Ensure that invocations of apt-get are not interactive by default,
# here and in all subprocesses.
export DEBIAN_FRONTEND=noninteractive

### some utility functions ####
aptget() {
    apt-get --assume-yes -q "$@" </dev/null
}

add_bin() {
    cat > "${BIN_D}/$1"
    chmod "${2:-755}" "${BIN_D}/$1"
}

fail() {
    [ -z "$CRED_CFG" ] || signal FAILED "$1"
    echo "FAILED: $1" 1>&2;
    exit 1
}

find_creds_cfg() {
    local config="" file="" found=""

    # If the config location is set in environment variable, trust it.
    [ -n "${COMMISSIONING_CREDENTIALS_URL}" ] &&
      _RET="${COMMISSIONING_CREDENTIALS_URL}" && return

    # Go looking for local files written by cloud-init.
    for file in /etc/cloud/cloud.cfg.d/*cmdline*.cfg; do
        [ -f "$file" ] && _RET="$file" && return
    done

    local opt="" cmdline=""
    if [ -f /proc/cmdline ] && read cmdline < /proc/cmdline; then
        # Search through /proc/cmdline arguments:
        # cloud-config-url trumps url=
        for opt in $cmdline; do
            case "$opt" in
                url=*)
                    found=${opt#url=};;
                cloud-config-url=*)
                    _RET="${opt#*=}"
                    return 0;;
            esac
        done
        [ -n "$found" ] && _RET="$found" && return 0
    fi
    return 1
}

# Do everything needed to be able to use maas_api_helper or any script which
# imports it.
prep_maas_api_helper() {
    local creds=""

    # Update apt cache and install libraries required by maas_api_helper.py
    aptget update
    aptget install python3-yaml python3-oauthlib

    find_creds_cfg || fail "Failed to find credential config"
    creds="$_RET"

    # Get remote credentials into a local file.
    case "$creds" in
        http://*|https://*)
            wget "$creds" -O "${TEMP_D}/my.creds" ||
              fail "failed to get credentials from $cred_cfg"
            creds="${TEMP_D}/my.creds"
            ;;
    esac

    # Use global name read by signal().
    export CRED_CFG="$creds"
}

# Invoke the "signal()" API call to report progress.
# Usage: signal <status> <message>
signal() {
    maas-signal "--config=${CRED_CFG}" "$@"
}


# This script is passed to cloud-init from MAAS during commissioning. This
# script contains multiple files inside it. When executed these files are
# extracted and run. This script detects power settings, runs commissioning
# scripts to gather data about the system, and runs testing scripts to validate
# the hardware is in a functioning state.

####  IPMI setup  ######
IPMI_CONFIG_D="${TEMP_D}/ipmi.d"
mkdir -p "$IPMI_CONFIG_D"
# If IPMI network settings have been configured statically, you can
# make them DHCP. If 'true', the IPMI network source will be changed
# to DHCP.
IPMI_CHANGE_STATIC_TO_DHCP="false"

# In certain hardware, the parameters for the ipmi_si kernel module
# might need to be specified. If you wish to send parameters, uncomment
# the following line.
#IPMI_SI_PARAMS="type=kcs ports=0xca2"

add_ipmi_config() {
   cat > "${IPMI_CONFIG_D}/$1"
   chmod "${2:-644}" "${IPMI_CONFIG_D}/$1"
}

main() {
    prep_maas_api_helper

    # Install IPMI deps
    aptget install freeipmi-tools openipmi ipmitool sshpass

    # Load IPMI kernel modules
    modprobe ipmi_msghandler
    modprobe ipmi_devintf
    modprobe ipmi_si ${IPMI_SI_PARAMS}
    modprobe ipmi_ssif
    udevadm settle

    # Power settings.
    local pargs=""
    if $IPMI_CHANGE_STATIC_TO_DHCP; then
        pargs="--dhcp-if-static"
    fi
    power_type=$(maas-ipmi-autodetect-tool)
    if [ -z $power_type ]; then
        power_type=$(maas-wedge-autodetect --check) || power_type=""
    fi
    case "$power_type" in
        ipmi)
            power_settings=$(maas-ipmi-autodetect \
              --configdir "$IPMI_CONFIG_D" ${pargs})
            ;;
        moonshot)
            power_settings=$(maas-moonshot-autodetect)
            ;;
        wedge)
            power_settings=$(maas-wedge-autodetect --get-credentials) || power_settings=""
            ;;
    esac
    if [ ! -z "$power_settings" ]; then
        signal \
          "--power-type=${power_type}" "--power-parameters=${power_settings}" \
          WORKING "Finished [maas-ipmi-autodetect]"
    fi

    maas-run-remote-scripts "--config=${CRED_CFG}" "${TEMP_D}"
}

### begin writing files ###

# Example config: enable BMC remote access (on some systems.)
#add_ipmi_config "02-global-config.ipmi" <<"END_IPMI_CONFIG"
#Section Lan_Channel
#       Volatile_Access_Mode                    Always_Available
#       Volatile_Enable_User_Level_Auth         Yes
#       Volatile_Channel_Privilege_Limit        Administrator
#       Non_Volatile_Access_Mode                Always_Available
#       Non_Volatile_Enable_User_Level_Auth     Yes
#       Non_Volatile_Channel_Privilege_Limit    Administrator
#EndSection
#END_IPMI_CONFIG

add_bin "maas-ipmi-autodetect-tool" <<"END_MAAS_IPMI_AUTODETECT_TOOL"
#!/usr/bin/python3

import glob
import re
import subprocess


def detect_ipmi():
    # XXX: andreserl 2013-04-09 bug=1064527: Try to detect if node
    # is a Virtual Machine. If it is, do not try to detect IPMI.
    with open('/proc/cpuinfo', 'r') as cpuinfo:
        for line in cpuinfo:
